import numpy as np
from skimage import io
from matplotlib import pyplot as plt
import time

def LSC(blc_img, k, offset):
  """
  inputs:
    blc_img = bayer domain image after black level compensation
    k = correction factor to control strength of the correction
    offset = offset in case the final image is too bright

  outputs:
    lsc_img = bayer domain image adjusted for lens shading
  """

  rows, cols = blc_img.shape
  center_x = (cols // 2) + 1 # identify center if the image
  center_y = (rows // 2) + 1
  x, y = np.meshgrid(np.arange(cols), np.arange(rows)) # create an array where each index is the radial distance from the center
  radial_dist = np.sqrt((x - center_x)**2 + (y - center_y)**2)
  radial_dist = np.where(radial_dist <= 1300, 1300, radial_dist) # ensure correction only applies on the outer edges

  lsc_img = (blc_img * (k * radial_dist + 1) - offset).astype(np.uint16) # apply correction

  return lsc_img

"""
module_start = time.time()
k = 0.0015
offset = 0
lsc_img = LSC(blc_img, k, offset)
print("time taken by this module = ", (time.time() - module_start))

# plt.imshow(lsc_img, cmap = 'gray')
"""
