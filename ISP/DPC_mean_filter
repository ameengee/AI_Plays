from skimage import io
from matplotlib import pyplot as plt
import numpy as np

pgm_path = '/content/color_checker.pgm'
bayer = io.imread(pgm_path).astype(np.uint16)

def DPC_mean_filter(bayer, thresh):
  """
  inputs:
    bayer = raw bayer domain image
    thresh = threshold value

  outputs:
    dpc_img = bayer domain image with dead pixels corrected for with mean filter
  """

  rows, cols = np.shape(bayer)
  padded_bayer = np.pad(bayer, (2,2), mode = 'reflect')
  dpc_img = np.copy(bayer)  # create a copy of the bayer image to fix dead pixels in

  for i in range(2, rows+2, 1):
    for j in range(2, cols+2, 1):
      # iterate over every pixel in the original bayer image

      p_0 = padded_bayer[i, j]
      p_1 = padded_bayer[i-2, j-2]
      p_2 = padded_bayer[i-2, j]
      p_3 = padded_bayer[i-2, j+2]
      p_4 = padded_bayer[i, j-2]
      p_5 = padded_bayer[i, j+2]
      p_6 = padded_bayer[i+2, j-2]
      p_7 = padded_bayer[i+2, j]
      p_8 = padded_bayer[i+2, j+2]
      neighbors = np.array([p_1, p_2, p_3, p_4, p_5, p_6, p_7, p_8])

      diff = np.abs(neighbors - p_0)  # for dead pixel detection

      if np.sum(diff > thresh) >= 1:
        # if dead pixel is detected, the run mean filter based correction
        mean = np.sum(neighbors) // 8
        dpc_img[i-2, j-2] = mean # add the corrected pixel value to the copied image

  return dpc_img

thresh = np.max(bayer[:50, :50]) * 0.05
dpc_img = DPC_mean_filter(bayer[:50, :50], thresh)
plt.imshow(dpc_img, cmap = 'gray')
